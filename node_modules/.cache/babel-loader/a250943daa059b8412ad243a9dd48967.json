{"ast":null,"code":"import _defineProperty from \"/Users/christopherho/Projects/christopherhoportfolio-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/christopherho/Projects/christopherhoportfolio-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/christopherho/Projects/christopherhoportfolio-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/christopherho/Projects/christopherhoportfolio-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/christopherho/Projects/christopherhoportfolio-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/christopherho/Projects/christopherhoportfolio-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/christopherho/Projects/christopherhoportfolio-react/src/screens/admin/ProjectForm.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { DropzoneArea } from 'material-ui-dropzone';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Jimp from 'jimp';\nimport { createAProject, hideSnackBar, finishedCreatingUpdatingProject } from './redux/actions';\nimport { shouldShowProgressOverlay, shouldShowSnackBar, messageForSnackBar, isUpdatingProject, getSelectedProjectForUpdating } from './redux/selectors';\nvar styles = {\n  paper: {\n    maxWidth: 700,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    paddingRight: 40,\n    paddingLeft: 40\n  },\n  field: {\n    marginRight: 20,\n    marginLeft: 20\n  },\n  container: {\n    marginRight: 40,\n    marginLeft: 40,\n    position: 'relative'\n  },\n  dropzone: {\n    marginTop: 20\n  },\n  submitButton: {\n    marginTop: 20,\n    marginBottom: 20\n  },\n  thumbnailUpload: {\n    marginTop: 10,\n    flexDirection: 'row'\n  },\n  title: {\n    textAlign: 'center'\n  },\n  overlay: {\n    opacity: 0.5,\n    background: \"#000\",\n    width: \"100%\",\n    height: \"100%\",\n    zIndex: 10,\n    top: 0,\n    left: 0,\n    position: \"fixed\",\n    textAlign: \"center\"\n  },\n  progressSpinner: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    margin: 'auto',\n    width: 100,\n    height: 100,\n    zIndex: 11\n  }\n};\nexport var ProjectForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ProjectForm, _React$Component);\n\n  _createClass(ProjectForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        id: this.props.getSelectedProjectForUpdating.id,\n        title: this.props.getSelectedProjectForUpdating.title,\n        type: this.props.getSelectedProjectForUpdating.type,\n        thumbnail: '',\n        description: this.props.getSelectedProjectForUpdating.description,\n        pictures: [],\n        linkReference: this.props.getSelectedProjectForUpdating.linkReference\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.clearProjectForm();\n    }\n  }]);\n\n  function ProjectForm(props) {\n    var _this;\n\n    _classCallCheck(this, ProjectForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProjectForm).call(this, props));\n\n    _this.handleChange = function (fieldName) {\n      return function (event) {\n        _this.setState(_defineProperty({}, fieldName, event.target.value));\n      };\n    };\n\n    _this.handleThumbnail = function (fieldName) {\n      return function (event) {\n        _this.setState(_defineProperty({}, fieldName, event.target.files[0]));\n      };\n    };\n\n    _this.handleImageDrop = function (fieldName) {\n      return function (file) {\n        Jimp.read(file).then(function (image) {\n          if (image.bitmap.data.length > MAX_IMAGE_SIZE) {\n            image.quality(80); // some value of 'quality'\n\n            console.log(image);\n          } // do something else with the image\n\n        }); // var reader = new FileReader();\n        // reader.onload = (function(inputFile) {\n        //   return function(e) {\n        //       var imageBlob = new Blob([e.target.result], {type: inputFile.type})\n        //       var src = URL.createObjectURL(imageBlob)\n        //       Jimp.read(src, (err, image) => {\n        //         console.log(image)\n        //       })\n        //     }\n        //   }\n        // )(file)\n        // var image = reader.readAsArrayBuffer(file);\n        // console.log(image)\n      };\n    };\n\n    _this.state = {\n      id: undefined,\n      title: '',\n      type: '',\n      thumbnail: '',\n      description: '',\n      pictures: [],\n      linkReference: undefined\n    };\n    return _this;\n  }\n\n  _createClass(ProjectForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          uploadProject = _this$props.uploadProject,\n          shouldShowProgressOverlay = _this$props.shouldShowProgressOverlay,\n          closeSnackBar = _this$props.closeSnackBar,\n          shouldShowSnackBar = _this$props.shouldShowSnackBar,\n          snackBarMessage = _this$props.snackBarMessage,\n          isUpdatingProject = _this$props.isUpdatingProject;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, shouldShowProgressOverlay ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: styles.overlay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: styles.progressSpinner,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(CircularProgress, {\n        color: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }))) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }), React.createElement(Grid, {\n        container: true,\n        spacing: 24,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: styles.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, isUpdatingProject ? \"Update Project\" : \"Create Project\")), React.createElement(Paper, {\n        style: styles.paper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"outlined-name\",\n        label: \"Name\",\n        value: this.state.title,\n        onChange: this.handleChange('title'),\n        margin: \"normal\",\n        variant: \"outlined\",\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"outlined-type\",\n        label: \"Type\",\n        value: this.state.type,\n        onChange: this.handleChange('type'),\n        margin: \"normal\",\n        variant: \"outlined\",\n        multiline: true,\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        style: styles.thumbnailUpload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        component: \"label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, \"Upload Thumbnail\", React.createElement(\"input\", {\n        type: \"file\",\n        style: {\n          display: \"none\"\n        },\n        onChange: this.handleThumbnail('thumbnail'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, this.state.thumbnail.name)), React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"outlined-description\",\n        label: \"Description\",\n        value: this.state.description,\n        onChange: this.handleChange('description'),\n        margin: \"normal\",\n        variant: \"outlined\",\n        multiline: true,\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        style: styles.dropzone,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(DropzoneArea, {\n        filesLimit: 6,\n        onDrop: this.handleImageDrop('pictures'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"outlined-linkReference\",\n        label: \"Link Reference (Optional)\",\n        value: this.state.linkReference,\n        onChange: this.handleChange('linkReference'),\n        margin: \"normal\",\n        variant: \"outlined\",\n        multiline: true,\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        style: styles.submitButton,\n        onClick: function onClick() {\n          uploadProject(_this2.state, isUpdatingProject);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, isUpdatingProject ? \"Update Project\" : \"Create Project\"))))), React.createElement(Snackbar, {\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'center'\n        },\n        open: shouldShowSnackBar,\n        autoHideDuration: 5000,\n        onClose: closeSnackBar,\n        ContentProps: {\n          'aria-describedby': 'message-id'\n        },\n        message: React.createElement(\"span\", {\n          id: \"message-id\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        }, snackBarMessage),\n        action: [React.createElement(IconButton, {\n          key: \"close\",\n          \"aria-label\": \"Close\",\n          color: \"inherit\",\n          onClick: closeSnackBar,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269\n          },\n          __self: this\n        }, React.createElement(CloseIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275\n          },\n          __self: this\n        }))],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ProjectForm;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isUpdatingProject: isUpdatingProject(state),\n    shouldShowProgressOverlay: shouldShowProgressOverlay(state),\n    shouldShowSnackBar: shouldShowSnackBar(state),\n    snackBarMessage: messageForSnackBar(state),\n    getSelectedProjectForUpdating: getSelectedProjectForUpdating(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    uploadProject: function uploadProject(project, isUpdatingProject) {\n      return dispatch(createAProject(project, isUpdatingProject));\n    },\n    closeSnackBar: function closeSnackBar() {\n      return dispatch(hideSnackBar());\n    },\n    clearProjectForm: function clearProjectForm() {\n      return dispatch(finishedCreatingUpdatingProject());\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ProjectForm));","map":{"version":3,"sources":["/Users/christopherho/Projects/christopherhoportfolio-react/src/screens/admin/ProjectForm.js"],"names":["React","connect","withRouter","TextField","Paper","Grid","DropzoneArea","Button","Snackbar","CircularProgress","IconButton","CloseIcon","Jimp","createAProject","hideSnackBar","finishedCreatingUpdatingProject","shouldShowProgressOverlay","shouldShowSnackBar","messageForSnackBar","isUpdatingProject","getSelectedProjectForUpdating","styles","paper","maxWidth","marginLeft","marginRight","paddingRight","paddingLeft","field","container","position","dropzone","marginTop","submitButton","marginBottom","thumbnailUpload","flexDirection","title","textAlign","overlay","opacity","background","width","height","zIndex","top","left","progressSpinner","bottom","right","margin","ProjectForm","setState","id","props","type","thumbnail","description","pictures","linkReference","clearProjectForm","handleChange","fieldName","event","target","value","handleThumbnail","files","handleImageDrop","file","read","then","image","bitmap","data","length","MAX_IMAGE_SIZE","quality","console","log","state","undefined","uploadProject","closeSnackBar","snackBarMessage","display","name","vertical","horizontal","Component","mapStateToProps","mapDispatchToProps","dispatch","project"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport {DropzoneArea} from 'material-ui-dropzone';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Jimp from 'jimp';\nimport {\n  createAProject, \n  hideSnackBar,\n  finishedCreatingUpdatingProject\n} from './redux/actions';\nimport {\n  shouldShowProgressOverlay, \n  shouldShowSnackBar,\n  messageForSnackBar,\n  isUpdatingProject,\n  getSelectedProjectForUpdating\n} from './redux/selectors';\n\nconst styles = {\n  paper: {\n    maxWidth: 700,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    paddingRight: 40,\n    paddingLeft: 40,\n  },\n  field: {\n    marginRight: 20,\n    marginLeft: 20\n  },\n  container:{\n    marginRight: 40,\n    marginLeft: 40,\n    position: 'relative',\n  },\n  dropzone:{\n    marginTop: 20,\n  },\n  submitButton:{\n    marginTop: 20,\n    marginBottom: 20,\n  },\n  thumbnailUpload:{\n    marginTop:10,\n    flexDirection: 'row'\n  },\n  title:{\n    textAlign:'center'\n  },\n  overlay:{\n    opacity: 0.5 ,\n    background: \"#000\",\n    width: \"100%\",\n    height: \"100%\", \n    zIndex:  10,\n    top: 0, \n    left: 0, \n    position: \"fixed\", \n    textAlign: \"center\"\n  },\n  progressSpinner:{\n    position: \"absolute\",\n    top:0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    margin: 'auto',\n    width: 100,\n    height: 100,\n    zIndex: 11\n  }\n};\n\nexport class ProjectForm extends React.Component{\n\n  componentDidMount(){\n    this.setState({\n      id: this.props.getSelectedProjectForUpdating.id,\n      title: this.props.getSelectedProjectForUpdating.title,\n      type: this.props.getSelectedProjectForUpdating.type,\n      thumbnail: '',\n      description: this.props.getSelectedProjectForUpdating.description,\n      pictures: [],\n      linkReference: this.props.getSelectedProjectForUpdating.linkReference\n    });\n  }\n\n  componentWillUnmount(){\n    this.props.clearProjectForm()\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: undefined,\n      title: '',\n      type: '',\n      thumbnail: '',\n      description: '',\n      pictures: [],\n      linkReference: undefined,\n    };\n  }\n\n  handleChange = fieldName => event => {\n    this.setState({ \n      [fieldName] : event.target.value\n    })\n  };\n\n  handleThumbnail = fieldName => event => { \n    this.setState({ \n      [fieldName] : event.target.files[0]\n    })\n  }\n\n  handleImageDrop = fieldName => file => {\n\n    Jimp.read(file).then((image) => {\n      if (image.bitmap.data.length > MAX_IMAGE_SIZE) {\n        image.quality(80); // some value of 'quality'\n        console.log(image)\n      }\n      // do something else with the image\n    })\n    // var reader = new FileReader();\n    // reader.onload = (function(inputFile) {\n    //   return function(e) {\n    //       var imageBlob = new Blob([e.target.result], {type: inputFile.type})\n    //       var src = URL.createObjectURL(imageBlob)\n    //       Jimp.read(src, (err, image) => {\n    //         console.log(image)\n    //       })\n    //     }\n    //   }\n    // )(file)\n\n    // var image = reader.readAsArrayBuffer(file);\n    // console.log(image)\n  }\n\n  render(){\n    const {\n      uploadProject,\n      shouldShowProgressOverlay,\n      closeSnackBar,\n      shouldShowSnackBar,\n      snackBarMessage,\n      isUpdatingProject,\n    } = this.props\n    return (\n      <div>\n        {\n          shouldShowProgressOverlay? \n          (\n          <div>\n            <div style={styles.overlay}></div>\n            <div style={styles.progressSpinner}>\n              <CircularProgress color=\"secondary\" />\n            </div>\n          </div>\n          ): \n          (< div></div>)\n        }\n        <Grid container spacing = {24}>\n          <Grid item xs={12} style={styles.container}>\n            <div style={styles.title}>\n              <h2>{isUpdatingProject? (\"Update Project\"): (\"Create Project\")}</h2>\n            </div> \n            <Paper style = {styles.paper}>\n              <Grid item xs= {12}>\n                <TextField\n                  id=\"outlined-name\"\n                  label=\"Name\"\n                  value={this.state.title}\n                  onChange={this.handleChange('title')}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  fullWidth={true}\n                />\n              </Grid>\n              <Grid item xs= {12}>\n                <TextField\n                  id=\"outlined-type\"\n                  label=\"Type\"\n                  value={this.state.type}\n                  onChange={this.handleChange('type')}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  multiline={true}\n                  fullWidth={true}\n                />\n              </Grid>\n              <Grid item xs={12} style={styles.thumbnailUpload}>\n                <Button variant=\"contained\"component=\"label\">\n                  Upload Thumbnail\n                  <input\n                    type=\"file\"\n                    style={{ display: \"none\" }}\n                    onChange={this.handleThumbnail('thumbnail')}\n                  />\n                </Button>\n                <p>{this.state.thumbnail.name}</p>\n              </Grid>\n              <Grid item xs= {12}>\n                <TextField\n                  id=\"outlined-description\"\n                  label=\"Description\"\n                  value={this.state.description}\n                  onChange={this.handleChange('description')}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  multiline={true}\n                  fullWidth={true}\n                />\n              </Grid>\n              <Grid item xs= {12} style={styles.dropzone}>\n                <DropzoneArea \n                  filesLimit={6}\n                  onDrop={this.handleImageDrop('pictures')}\n                  />\n              </Grid>\n              <Grid item xs= {12}>\n                <TextField\n                  id=\"outlined-linkReference\"\n                  label=\"Link Reference (Optional)\"\n                  value={this.state.linkReference}\n                  onChange={this.handleChange('linkReference')}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  multiline={true}\n                  fullWidth={true}\n                />\n              </Grid>\n              <Grid item xs= {12}>\n                <Button \n                variant=\"contained\" \n                color=\"secondary\" \n                style={styles.submitButton}\n                onClick={() => {uploadProject(this.state, isUpdatingProject)}}>\n                  {isUpdatingProject? (\"Update Project\"): (\"Create Project\")}\n                </Button>\n              </Grid>\n            </Paper>\n          </Grid>\n        </Grid>\n\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center',\n          }}\n          open={shouldShowSnackBar}\n          autoHideDuration={5000}\n          onClose={closeSnackBar}\n          ContentProps={{\n            'aria-describedby': 'message-id',\n          }}\n          message={<span id=\"message-id\">{snackBarMessage}</span>}\n          action={[\n            <IconButton\n              key=\"close\"\n              aria-label=\"Close\"\n              color=\"inherit\"\n              onClick={closeSnackBar}\n            >\n              <CloseIcon />\n            </IconButton>,\n          ]}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isUpdatingProject: isUpdatingProject(state),\n  shouldShowProgressOverlay: shouldShowProgressOverlay(state),\n  shouldShowSnackBar: shouldShowSnackBar(state),\n  snackBarMessage: messageForSnackBar(state),\n  getSelectedProjectForUpdating: getSelectedProjectForUpdating(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  uploadProject: (project, isUpdatingProject) => dispatch(createAProject(project, isUpdatingProject)),\n  closeSnackBar: () => dispatch(hideSnackBar()),\n  clearProjectForm: () => dispatch(finishedCreatingUpdatingProject())\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ProjectForm));"]},"metadata":{},"sourceType":"module"}